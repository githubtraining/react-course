title: Introduction to React
tagline: Take your first steps in modern frontend development
description: In this course, you will learn the basics of React.js through building a gradebook web application to manage assignments, students, and grades.
template:
  name: intro-react
  repo: react-template
  description: 'A robot powered training repository :robot:'
before:
  - type: createIssue
    title: Welcome to React
    body: 00-setup.md
  - type: updateBranchProtection

steps:
  - title: Add a Header Component
    description: Welcome to React! Let's get started with our project.
    event: pull_request.opened
    link: '{{ repoUrl }}/issues/1'
    actions:
      - type: gate
        left: '%payload.pull_request.title%'
        right: Changes
        operator: ===
        else:
          - type: respond
            with: Make sure the title of your PR is "Changes"
            issue: Welcome to React
      - type: respond
        with: 01-congrats.md
        issue: Changes
      - type: respond
        with: 01-components.md
        issue: Changes
      - type: octokit
        method: pullRequests.createComment
        owner: '%payload.repository.owner.login%'
        repo: '%payload.repository.name%'
        number: '%payload.number%'
        commit_id: '%payload.pull_request.head.sha%'
        path: src/App.jsx
        body: |
            ### Add a header component
            Let's add a couple of child components and give our app a header.

            Replace the line where it says to replace with this header component:

            ```jsx
            <h3 className="Box-title d-flex flex-justify-center">GradeBook</h3>
            ```

            ### Run your code
            To run your code, inside your repo folder in your termainal run `npm start`.

            ### What your code should look like

            Your app should look like this!
            ![App with header](https://user-images.githubusercontent.com/25253905/61294086-eb352e80-a789-11e9-96ab-8b6cb09b3791.png)

            ### Push your code
            Let's push your code to GitHub

            Run the following lines inside your repo folder in your terminal.

            ```
            git add src/App.jsx
            git commit -m "added a header"
            git push origin changes
            ```
        position: 85
  - title: Props
    actions:
      - type: gate
        left: '%payload.ref%'
        operator: ===
        right: refs/heads/changes
      - type: getPullRequest
        pullRequest: Changes
        action_id: metaPR2
      - type: respond
        with: 02-props.md
        issue: Changes
      - type: octokit
        method: pullRequests.createComment
        owner: '%actions.metaPR2.data.head.repo.owner.login%'
        repo: '%actions.metaPR2.data.head.repo.name%'
        number: '%actions.metaPR2.data.number%'
        commit_id: '%actions.metaPR2.data.head.sha%'
        path: src/App.jsx
        body: |
            ### Import a Child Component

            Navigate to `List.jsx`. You'll see that we made our own component, `List`. 

            Let's go ahead and import that component.

            At the top of `App.jsx`, replace the line with

            ```js
            import List from "./List";
            ```

            ### Push your code
            Let's push your code to GitHub

            Run the following lines inside your repo folder in your terminal.

            ```
            git add src/App.jsx
            git commit -m "added a header"
            git push origin changes
            ```
        position: 3
      - type: octokit
        method: pullRequests.createComment
        owner: '%actions.metaPR2.data.head.repo.owner.login%'
        repo: '%actions.metaPR2.data.head.repo.name%'
        number: '%actions.metaPR2.data.number%'
        commit_id: '%actions.metaPR2.data.head.sha%'
        path: src/App.jsx
        body: |
              ## Uncomment Assignments Section 

              Go ahead and uncomment the conditional statement underneath where it says to
              
              `Uncomment below for step 2`


              ### Run your code

              To run your code, move inside your repo folder in your terminal and run `npm start`

              ### What your code should look like

              ![No Title Assignments](https://user-images.githubusercontent.com/25253905/61294177-1ddf2700-a78a-11e9-963d-8b6d2a4f7b82.png)

              ### Code Explanation

              Let's take a look at what this code means. Basically, what it is saying is that when we click the `Assignments` button, the list for assignments will be assigned to the variable `tabChoice`. In our `render` method, we see that `tabChoice` is rendered.

              But how do we specialize the `List` for our assignments? This where our props come into play. We create properties such as `placeholder`, and `currList`. We then assign values to them.

              Scroll below for more code to add!
        position: 46
      - type: octokit
        method: pullRequests.createComment
        owner: '%actions.metaPR2.data.head.repo.owner.login%'
        repo: '%actions.metaPR2.data.head.repo.name%'
        number: '%actions.metaPR2.data.number%'
        commit_id: '%actions.metaPR2.data.head.sha%'
        path: src/List.jsx
        body: |
              ### Replace the title

              But what does the `List` component do with this information? Let's take a look. 

              Go to `List.jsx`. In the `render` method, in our input tag, you see that we set our `placeholder` to `this.props.placeholder`, and then at the bottom of our `render` method, we loop through out `this.props.currList`, to show each item in the list that we pass. Adding `this.props` tells the component to look for that property that was passed to it.

              Let's go ahead and replace that ugly title with a prop. In our `render` method in `List.jsx`, where it says to replace the title with a prop, replace that with `{this.props.title}`.

              ### Run your code

              To run your code, move inside your repo folder in your terminal and run `npm start`

              ### Push your code
              Awesome! We are using props! You already learned so much! 

              To push your code to Github, run the following lines inside the repo folder in your terminal.

              ```
              git add src/App.jsx
              git add src/List.jsx
              git commit -m "using props for List component"
              git push origin changes
              ```
        position: 5
    description: Learn how to pass data to child components
    event: push
    link: '{{ repoUrl }}/issues/2'
  - title: State
    actions:
      - type: gate
        left: '%payload.ref%'
        operator: ===
        right: refs/heads/changes
      - type: getPullRequest
        pullRequest: Changes
        action_id: metaPR2
      - type: getFileContents
        action_id: fileContents
        filename: 'src/App.jsx'
      - type: gate
        left: '/^\s*if\s*\(\s*this.state.buttonClicked\s*===\s*"assignments"\)\s*{\s*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*}\s*\n/gm'     
        operator: test
        right: '%actions.fileContents%'
        else:
          - type: respond
            with: bad-uncomment.md
            issue: Changes
      - type: respond
        with: 03-state.md
        issue: Changes
      - type: octokit
        method: pullRequests.createComment
        owner: '%actions.metaPR2.data.head.repo.owner.login%'
        repo: '%actions.metaPR2.data.head.repo.name%'
        number: '%actions.metaPR2.data.number%'
        commit_id: '%actions.metaPR2.data.head.sha%'
        path: src/App.jsx
        body: |
            ### Add a state variable

            In React, we store dynamic data in **state variables**. Let's take a look at how we store state variables. In `App.jsx`, take a look at the constructor. You'll see that we declare our state variables using `this.state = {.....}`.


            Currently, in `App`, we have three state variables:
            - `buttonClicked` - This stores which button was clicked. It is a state variable because the button that is clicked has the ability to change.
            - `assignments` - This stores the list of assignments. It is a state variable because the list changes every time a new assignment is added.
            - `grades` - This should store the grade for each student. However, we have no way to store students, so let's fix that!

            Add a state variable to `App` and name it `students`. Set it equal to an empty list. Make sure to add the comma! 
        position: 12
      - type: octokit
        method: pullRequests.createComment
        owner: '%actions.metaPR2.data.head.repo.owner.login%'
        repo: '%actions.metaPR2.data.head.repo.name%'
        number: '%actions.metaPR2.data.number%'
        commit_id: '%actions.metaPR2.data.head.sha%'
        path: src/App.jsx
        body: |

            ### Explaining `this.setState`

            Ok, so now we added a state variable, how do we actually change the data?

            Unfortunatley, we can't just do `this.state.studentsList = .....` to change data. I wish it was that simple!

            To set the state of a state variable we have to use the method, `this.setState`.

            Take a look at the above code in `App.jsx`

            When this method is called, it setting the state variable `buttonClicked` to the argument, `buttonName` using `this.setState`.

            In our `render` method we see that `handleButtonClicked` is called when each button is clicked with it's respective arguments. For instance, when the `Assignments` button is clicked, we call `handleButtonClicked("assignments")`.

            We are going to set some state in next steps.
        position: 32
      - type: octokit
        method: pullRequests.createComment
        owner: '%actions.metaPR2.data.head.repo.owner.login%'
        repo: '%actions.metaPR2.data.head.repo.name%'
        number: '%actions.metaPR2.data.number%'
        commit_id: '%actions.metaPR2.data.head.sha%'
        path: src/App.jsx
        body: |

            ### Create `addStudent` Function

            Now that we see how it works with assignments, let's try it with students! 

            create a method called `addStudent` below the comment

            `addStudent` should take `studentName` as a parameter and then concat that `studentName` to the end of `students` list that we created earlier. 
        position: 38
      - type: octokit
        method: pullRequests.createComment
        owner: '%actions.metaPR2.data.head.repo.owner.login%'
        repo: '%actions.metaPR2.data.head.repo.name%'
        number: '%actions.metaPR2.data.number%'
        commit_id: '%actions.metaPR2.data.head.sha%'
        path: src/App.jsx
        body: |

            ### Bind the function

            Also, since we created a method that changes the a state variable, we have to bind it to our class, so that when we call it, we know what method to reference.

            Go ahead and uncomment this line.

            ### Run your code
            Run your code with `npm start` to make sure there are no errors.


            ### Push your code

            ```
            git add src/App.jsx
            git commit -m "using students state variable and setting state"
            git push origin changes

            ```
        position: 20
    description: Learn how to deal with dynamic data
    event: push
    link: '{{ repoUrl }}/issues/2'
  - title: Callback Functions
    actions:
      - type: gate
        left: '%payload.ref%'
        operator: ===
        right: refs/heads/changes
      - type: getPullRequest
        pullRequest: Changes
        action_id: metaPR2
      - type: getFileContents
        action_id: fileContents
        filename: 'src/App.jsx'
      - type: gate
        left: '/^\s*this\.addStudent\s*=\s*this\.addStudent\.bind\s*\(\s*this\s*\)\s*;\s*\n/gm'
        operator: test
        right: '%actions.fileContents%'
        else:
          - type: respond
            with: bad-uncomment.md
            issue: Changes
      - type: getPullRequest
        pullRequest: Changes
        action_id: metaPR2
      - type: gate
        left: '/^\s*addStudent\s*\(\s*studentName\s*\)\s*/gm'     
        operator: test
        right: '%actions.fileContents%'
        else:
          - type: respond
            with: bad-function.md
            issue: Changes
      - type: respond
        with: 04-callbackfunctions.md
        issue: Changes
      - type: octokit
        method: pullRequests.createComment
        owner: '%actions.metaPR2.data.head.repo.owner.login%'
        repo: '%actions.metaPR2.data.head.repo.name%'
        number: '%actions.metaPR2.data.number%'
        commit_id: '%actions.metaPR2.data.head.sha%'
        path: src/App.jsx
        body: |
              
              ### Passing Functions as Props

              So where exactly are those functions we created to set state getting called?

              So it looks like we pass the `addAssignment` function as a prop in this chunk of code.
        position: 52
      - type: respond
        with: callback-example.md
        issue: Changes
      - type: octokit
        method: pullRequests.createComment
        owner: '%actions.metaPR2.data.head.repo.owner.login%'
        repo: '%actions.metaPR2.data.head.repo.name%'
        number: '%actions.metaPR2.data.number%'
        commit_id: '%actions.metaPR2.data.head.sha%'
        path: src/App.jsx
        body: |
            ### Change the props for Students

            Take a look at this conditional in `App.jsx`. 

            We are trying to render the correct component when we click `Students`. Go ahead and uncomment the entire conditional statement.

            Hmmm, there's some stuff wrong about this code. We want to be modifying the `students` list, not the `assignments` list. 

            Let's go ahead and change some props!

            - Change the `placeholder` prop to `"Add Student..."`
            - Change the `currList` prop to `{this.state.students}`
            - Change the `addFunction` prop to `{this.addStudent}`
        position: 68
      - type: octokit
        method: pullRequests.createComment
        owner: '%actions.metaPR2.data.head.repo.owner.login%'
        repo: '%actions.metaPR2.data.head.repo.name%'
        number: '%actions.metaPR2.data.number%'
        commit_id: '%actions.metaPR2.data.head.sha%'
        path: src/App.jsx
        body: |
            ### Uncomment the Grades Section 

            LAST THING! Let's get our grades working!

            Uncomment this last conditional statement for the grades tab!
            
            ### Run your code
            To run your code, move inside your repo folder in your terminal and run `npm start`

            ### What your code should look like

            Your code should now be able to add assignments, students, and grades! You are done!

            ### Push your code
            To push your code to Github, run the following lines inside the repo folder in your terminal.

            ```
            git add src/App.jsx
            git commit -m "used callback functions to complete project"
            git push origin changes
            ```
        position: 78


    description: Learn how to pass data back to parent components
    event: push
    link: '{{ repoUrl }}/issues/2'
  - title: Get Your Pull Request Approved
    event: push
    description: Let's confirm you made the right changes
    actions:
      - type: gate
        left: '%payload.ref%'
        operator: ===
        right: refs/heads/changes
      - type: createReview
        event: APPROVE
        body: approve.md
        pullRequest: Changes
  - title: Merge your Pull Request
    event: pull_request.closed
    description: Congrats on finishing the course!
    actions:
      - type: respond
        with: 05-congrats.md
        issue: Changes
    
